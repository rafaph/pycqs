name: CI

'on':
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

env:
  COLUMNS: 150
  PDM_DEPS: urllib3<2
  FINDPYTHON_GET_VERSION_TIMEOUT: 30

jobs:
  lint:
    runs-on: ubuntu-latest
    name: 'lint ${{ matrix.python-version }}'
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      - uses: actions/checkout@v4
      - uses: pdm-project/setup-pdm@v4
        with:
          python-version: '${{ matrix.python-version }}'
          cache: true
          allow-python-prereleases: true
      - name: install
        run: |
          pdm venv create --with-pip --force $PYTHON
          pdm install --skip=:post
      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: '--all-files --verbose'
        env:
          SKIP: no-commit-to-branch

  test:
    name: 'test ${{ matrix.os }} / ${{ matrix.python-version }}'
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
        include:
          - os: ubuntu-latest
            python-version: 'pypy3.10'
        exclude:
          - os: macos-latest
            python-version: '3.13'
    env:
      OS: '${{ matrix.os }}'
      DEPS: 'yes'
    runs-on: '${{ matrix.os }}'
    steps:
      - uses: actions/checkout@v4
      - uses: pdm-project/setup-pdm@v4
        with:
          python-version: '${{ matrix.python-version }}'
          cache: true
          allow-python-prereleases: true
      - name: install deps
        run: |
          pdm venv create --with-pip --force $PYTHON
          pdm install -G testing --skip=:post
      - run: pdm info && pdm list
      - run: >-
          pdm run python -c "import pycqs;
          print('pycqs version:', pycqs.__version__)"
      - name: test coverage
        run: pdm run test-cov
      - name: store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: 'coverage-${{ matrix.os }}-${{ matrix.python-version }}'
          path: coverage
      - name: upload results to codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  check:
    if: always()
    outputs:
      result: '${{ steps.all-green.outputs.result }}'
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - name: decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        id: all-green
        with:
          jobs: '${{ toJSON(needs) }}'

  release:
    needs:
      - check
    if: needs.check.outputs.result == 'success' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    outputs:
      pydantic-version: '${{ steps.check-tag.outputs.VERSION }}'
    steps:
      - uses: actions/checkout@v4
      - uses: pdm-project/setup-pdm@v4
        with:
          python-version: '3.12'
          cache: true
          allow-python-prereleases: true
      - name: check version
        id: check-tag
        uses: samuelcolvin/check-python-version@v4.1
        with:
          version_file_path: pycqs/__init__.py
      - name: build
        run: pdm build
      - name: upload package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
